pipeline airportDataPipeline{

    //This block is an HTTP extractor that fetches data from the specified URL. In this case, it's retrieving a CSV file from the provided URL.
    block airportDataExtractor oftype HttpExtractor{	
         // key: value
        	url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv";
    }	
    //converting file to textfile
    block airportDataTextFileInterpreter oftype TextFileInterpreter{

    }
    //This block interprets the text file as a CSV file, specifying that the delimiter between fields is a semicolon (;).
    block airportDataCSVFileInterpreter oftype CSVInterpreter{
        delimiter: ";";
    }
    //This block interprets the CSV data and converts it into a table format. It defines the columns of the table with their respective data types.
    block airportDataTableInterpreter oftype TableInterpreter{
        header:false;
        columns: [
            "column_1" oftype integer,
			"column_2" oftype text,
			"column_3" oftype text,
			"column_4" oftype text,
			"column_5" oftype text,
			"column_6" oftype text,
			"column_7" oftype text,
			"column_8" oftype text,
			"column_9" oftype text,
			"column_10" oftype text,
			"column_11" oftype text,
			"column_12" oftype text,
			"geo_punkt" oftype text
		];
    }

//generating sqlite file from the table
//This block is responsible for loading the interpreted data into an SQLite database.
// It specifies the target table name and the SQLite file to be generated.



    block airportDataSQLiteInterpreter oftype SQLiteLoader {
		 table: "airports"; //the target table name (airports)
         file: "airports.sqlite"; //the SQLite file to be generated (airports.sqlite).
	}
    
    //pipes
    pipe {
        from: airportDataExtractor;
        to: airportDataTextFileInterpreter;
    }
    pipe {
        from: airportDataTextFileInterpreter;
        to: airportDataCSVFileInterpreter;
    }
    pipe {
        from: airportDataCSVFileInterpreter;
        to: airportDataTableInterpreter;
    }
     pipe {
        from: airportDataTableInterpreter;
        to: airportDataSQLiteInterpreter;
    }
}
